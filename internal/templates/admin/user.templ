package  admin

import m "goth/internal/middleware"
import v "goth/internal/validator"
import "goth/internal/config"
import "fmt"
import "goth/internal/store"
import "strconv"
import "goth/internal/store/models"

type UserValidations struct {
	Id v.Validation
	Name                 v.Validation
	Email                v.Validation
	Password             v.Validation
	PasswordConfirmation v.Validation
}

templ modalHeader(edit bool) {
	<div class="modal-header">
		if edit {
			<h5 class="modal-title" id="exampleModalLabel">Edit User</h5>
		} else {
			<h5 class="modal-title" id="exampleModalLabel">Add New User</h5>
		}
		<button type="button" class="close" data-dismiss="modal" aria-label="Close">
			<span aria-hidden="true">&times;</span>
		</button>
	</div>
}

templ DeleteModalContent(user models.User) {
	<div class="modal-content" id="globalModalContent">
		<div class="modal-header">
			<h5 class="modal-title" id="exampleModalLabel">Delete User</h5>
			<button type="button" class="close" data-dismiss="modal" aria-label="Close">
				<span aria-hidden="true">&times;</span>
			</button>
		</div>
		<div class="modal-body">
			<h4>Are you sure you want to delte?</h4>
		</div>
		<div class="modal-footer">
			<button type="button" class="btn btn-secondary" data-dismiss="modal"><i class="fa fa-times mr-2"></i>Cancel</button>
			<button type="submit" class="btn btn-danger" hx-delete={ fmt.Sprintf("/admin/users/hx/deleteUser/%d", user.ID) }><i class="fa fa-trash mr-2"></i>Delete User</button>
		</div>
	</div>
}

templ UserModalContent(uv UserValidations, edit bool) {
	<div class="modal-content" id="globalModalContent">
		@modalHeader(edit)
		@UserForm(uv, edit)
	</div>
}

templ UserTableMain(paginator store.Pagination[models.User]) {
	<div class="card" id="userTableMain">
		<div class="card-body">
			@UserTable(paginator)
		</div>
		<div class="card-body d-flex justify-content-end">
			Total: { strconv.Itoa(paginator.Total()) }
		</div>
		<div class="card-footer d-flex justify-content-end">
			<nav aria-label="...">
				<ul class="pagination">
					<li class="page-item ">
						<a class="page-link" hx-swap="outerHTML" hx-target="#userTableMain" hx-get={ paginator.PreviousPageUrl() } tabindex="-1" aria-disabled="true">{ "<" }</a>
					</li>
					for _,i := range paginator.Pages() {
						if paginator.CurrentPage() == i {
							<li class="page-item active" aria-current="page">
								<a class="page-link" hx-swap="outerHTML" hx-target="#userTableMain" hx-get={ paginator.PageUrl(i) }>{ strconv.Itoa(i) } <span class="sr-only">(current)</span></a>
							</li>
						} else {
							<li class="page-item "><a class="page-link" hx-swap="outerHTML" hx-target="#userTableMain" hx-get={ paginator.PageUrl(i) }>{ strconv.Itoa(i) }</a></li>
						}
					}
					// <li class="page-item "><a class="page-link" href="#">1</a></li>
					// <li class="page-item active" aria-current="page">
					// 	<a class="page-link" href="#">2 <span class="sr-only">(current)</span></a>
					// </li>
					// <li class="page-item"><a class="page-link" href="#">3</a></li>
					<li class="page-item ">
						<a class="page-link" hx-swap="outerHTML" hx-target="#userTableMain" hx-get={ paginator.NextPageUrl() } aria-disabled="true">{ ">" }</a>
					</li>
				</ul>
			</nav>
		</div>
	</div>
}

templ UserContent(paginator store.Pagination[models.User]) {
	<div>
		<div class="content-header">
			<div class="container-fluid">
				<div class="row mb-2">
					<div class="col-sm-6">
						<h1 class="m-0 text-dark">Users</h1>
					</div><!-- /.col -->
					<div class="col-sm-6">
						<ol class="breadcrumb float-sm-right">
							<li class="breadcrumb-item"><a href="#">Dashboard</a></li>
							<li class="breadcrumb-item active">Users</li>
						</ol>
					</div><!-- /.col -->
				</div><!-- /.row -->
			</div><!-- /.container-fluid -->
		</div>
		<div class="content">
			<div class="container-fluid">
				// <div class="alert alert-success alert-dismissible fade show" role="alert">
				//   <strong><i class="fa fa-check-circle mr-1"></i>Success!</strong> 
				//   <button type="button" class="close" data-dismiss="alert" aria-label="Close">
				//     <span aria-hidden="true">&times;</span>
				//   </button>
				// </div>
				<div class="row">
					<div class="col-lg-12">
						<div class="d-flex justify-content-end mb-2">
							<button
								type="button"
								class="primary btn-primary"
								hx-target="#globalModalContent"
								hx-get={ config.Routes().Admin.Users.HX.AddUserModal }
							>
								<i class="fa fa-plus-circle mr-1"></i>Add New User
							</button>
						</div>
						@UserTableMain(paginator)
					</div>
					<!-- /.col-md-6 -->
				</div>
				<!-- /.row -->
			</div><!-- /.container-fluid -->
		</div>
	</div>
	<!-- Modal -->
	<div class="modal fade" id="globalModalForm" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content" id="globalModalContent"></div>
		</div>
	</div>
}

templ UserForm(uvs UserValidations, edit bool) {
	<form hx-post={ m.If(edit, config.Routes().Admin.Users.HX.Update, config.Routes().Admin.Users.HX.Create) }>
				<input
					type="hidden"
					name={ uvs.Id.Key }
					value={ uvs.Id.Value }
					id={ uvs.Id.Key + "_id" }
				/>
		<div class="modal-body">
			<div class="form-group">
				<label for={ uvs.Name.Key + "_id" }>Name </label>
				<input
					type="text"
					class={ "form-control" , m.If(uvs.Name.Result.Valid, "", "is-invalid") }
					name={ uvs.Name.Key }
					value={ uvs.Name.Value }
					id={ uvs.Name.Key + "_id" }
				/>
				<div class="invalid-feedback">
					{ uvs.Name.Result.ErrorMsg }
				</div>
			</div>
			<div class="form-group">
				<label for={ uvs.Email.Key + "_id" }>Email </label>
				<input
					type="text"
					class={ "form-control" , m.If(uvs.Email.Result.Valid, "", "is-invalid") }
					name={ uvs.Email.Key }
					value={ uvs.Email.Value }
					id={ uvs.Email.Key + "_id" }
				/>
				<div class="invalid-feedback">
					{ uvs.Email.Result.ErrorMsg }
				</div>
			</div>
			<div class="form-group">
				<label for={ uvs.Password.Key + "_id" }>Password </label>
				<input
					type="text"
					class={ "form-control" , m.If(uvs.Password.Result.Valid, "", "is-invalid") }
					name={ uvs.Password.Key }
					value={ uvs.Password.Value }
					id={ uvs.Password.Key + "_id" }
				/>
				<div class="invalid-feedback">
					{ uvs.Password.Result.ErrorMsg }
				</div>
			</div>
			<div class="form-group">
				<label for={ uvs.PasswordConfirmation.Key + "_id" }>Password Confirmation</label>
				<input
					type="text"
					class={ "form-control" , m.If(uvs.PasswordConfirmation.Result.Valid, "", "is-invalid") }
					name={ uvs.PasswordConfirmation.Key }
					value={ uvs.PasswordConfirmation.Value }
					id={ uvs.PasswordConfirmation.Key + "_id" }
				/>
				<div class="invalid-feedback">
					{ uvs.PasswordConfirmation.Result.ErrorMsg }
				</div>
			</div>
		</div>
		<div class="modal-footer">
			<button type="button" class="btn btn-secondary" data-dismiss="modal"><i class="fa fa-times mr-2"></i>Cancel</button>
			if edit {
				<button type="submit" class="btn btn-primary"><i class="fa fa-save mr-2"></i>Save Changes</button>
			} else {
				<button type="submit" class="btn btn-primary"><i class="fa fa-save mr-2"></i>Save</button>
			}
		</div>
	</form>
	// <script>
	// 		htmx.on('close-global-modal-form', event => {
	// 	  	htmx.ajax(
	// 		'GET',
	// 		'/admin/users/hx/list?page=1', {
	// 		  target: '#userTableMain',
	// 		  swap:'outerHTML'
	// 		});
	// 	})
	// </script>
}

templ UserTable(paginator store.Pagination[models.User]) {
	<table id="user-table" class="table table-hover">
		<thead>
			<tr>
				<th scope="col">#</th>
				<th scope="col">Name</th>
				<th scope="col">Email</th>
				<th scope="col">Options</th>
			</tr>
		</thead>
		<tbody>
			for i,user := range paginator.Items() {
				<tr>
					<th scope="row">{ fmt.Sprintf("%d", i+1) }</th>
					<td>{ user.Name }</td>
					<td>{ user.Email.String }</td>
					<td>
						<a href="#" hx-get={ fmt.Sprintf("/admin/users/hx/editUserModal/%d", user.ID) } hx-target="#globalModalContent">
							<i class="fa fa-edit mr-2"></i>
						</a>
						<a href="#" hx-delete={ fmt.Sprintf("/admin/users/hx/deleteUserModal/%d", user.ID) } hx-target="#globalModalContent">
							<i class="fa fa-trash text-danger mr-2"></i>
						</a>
					</td>
				</tr>
			}
		</tbody>
	</table>
}
