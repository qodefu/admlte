package appts
// import m "goth/internal/middleware"
import v "goth/internal/validator"
import "fmt"
import "goth/internal/store"
import "strconv"
import "goth/internal/utils"
import "goth/internal/store/models"


var idGen = utils.NewIdGen("appointments")
type ApptValidations struct {
	Name                 v.Validation
	Email                v.Validation
	Password             v.Validation
	PasswordConfirmation v.Validation
}

// templ modalHeader(edit bool) {
// 	<div class="modal-header">
// 		if edit {
// 			<h5 class="modal-title" id="exampleModalLabel">Edit Appointment</h5>
// 		} else {
// 			<h5 class="modal-title" id="exampleModalLabel">Add New Appointment</h5>
// 		}
// 		<button type="button" class="close" data-dismiss="modal" aria-label="Close">
// 			<span aria-hidden="true">&times;</span>
// 		</button>
// 	</div>
// }

// templ DeleteModalContent(email string) {
// 	<div class="modal-content" id="globalModalContent">
// 		<div class="modal-header">
// 			<h5 class="modal-title" id="exampleModalLabel">Delete Appt</h5>
// 			<button type="button" class="close" data-dismiss="modal" aria-label="Close">
// 				<span aria-hidden="true">&times;</span>
// 			</button>
// 		</div>
// 		<div class="modal-body">
// 			<h4>Are you sure you want to delte?</h4>
// 		</div>
// 		<div class="modal-footer">
// 			<button type="button" class="btn btn-secondary" data-dismiss="modal"><i class="fa fa-times mr-2"></i>Cancel</button>
// 			<button type="submit" class="btn btn-danger" hx-delete={ fmt.Sprintf("/admin/appts/hx/deleteAppt/%s", email) }><i class="fa fa-trash mr-2"></i>Delete Appt</button>
// 		</div>
// 	</div>
// }

// templ ApptModalContent(uv ApptValidations, edit bool) {
// 	<div class="modal-content" id="globalModalContent">
// 		@modalHeader(edit)
// 		@ApptForm(uv, edit)
// 	</div>
// }

templ ApptTableMain(paginator store.Pagination[models.Appointment]) {
	<div class="card" id="apptTableMain">
		<div class="card-body">
			@ApptTable(paginator)
		</div>
		<div class="card-body d-flex justify-content-end">
			Total: { strconv.Itoa(paginator.Total()) }
		</div>
		<div class="card-footer d-flex justify-content-end">
			<nav aria-label="...">
				<ul class="pagination">
					<li class="page-item ">
						<a class="page-link" hx-swap="outerHTML" hx-target="#apptTableMain" hx-get={ paginator.PreviousPageUrl() } tabindex="-1" aria-disabled="true">{ "<" }</a>
					</li>
					for _,i := range paginator.Pages() {
						if paginator.CurrentPage() == i {
							<li class="page-item active" aria-current="page">
								<a class="page-link" hx-swap="outerHTML" hx-target="#apptTableMain" hx-get={ paginator.PageUrl(i) }>{ strconv.Itoa(i) } <span class="sr-only">(current)</span></a>
							</li>
						} else {
							<li class="page-item "><a class="page-link" hx-swap="outerHTML" hx-target="#apptTableMain" hx-get={ paginator.PageUrl(i) }>{ strconv.Itoa(i) }</a></li>
						}
					}
					// <li class="page-item "><a class="page-link" href="#">1</a></li>
					// <li class="page-item active" aria-current="page">
					// 	<a class="page-link" href="#">2 <span class="sr-only">(current)</span></a>
					// </li>
					// <li class="page-item"><a class="page-link" href="#">3</a></li>
					<li class="page-item ">
						<a class="page-link" hx-swap="outerHTML" hx-target="#apptTableMain" hx-get={ paginator.NextPageUrl() } aria-disabled="true">{ ">" }</a>
					</li>
				</ul>
			</nav>
		</div>
	</div>
}

templ ApptContent(paginator store.Pagination[models.Appointment]) {
	<div>
		<div class="content-header">
			<div class="container-fluid">
				<div class="row mb-2">
					<div class="col-sm-6">
						<h1 class="m-0 text-dark">Appts</h1>
					</div><!-- /.col -->
					<div class="col-sm-6">
						<ol class="breadcrumb float-sm-right">
							<li class="breadcrumb-item"><a href="#">Dashboard</a></li>
							<li class="breadcrumb-item active">Appts</li>
						</ol>
					</div><!-- /.col -->
				</div><!-- /.row -->
			</div><!-- /.container-fluid -->
		</div>
		<div class="content">
			<div class="container-fluid">
				// <div class="alert alert-success alert-dismissible fade show" role="alert">
				//   <strong><i class="fa fa-check-circle mr-1"></i>Success!</strong> 
				//   <button type="button" class="close" data-dismiss="alert" aria-label="Close">
				//     <span aria-hidden="true">&times;</span>
				//   </button>
				// </div>
				<div class="row">
					<div class="col-lg-12">
						<div class="d-flex justify-content-end mb-2">
							<button
								type="button"
								class="primary btn-primary"
							>
								<i class="fa fa-plus-circle mr-1"></i>Add New Appointment 
							</button>
						</div>
						@ApptTableMain(paginator)
					</div>
					<!-- /.col-md-6 -->
				</div>
				<!-- /.row -->
			</div><!-- /.container-fluid -->
		</div>
	</div>
	<!-- Modal -->
	<div class="modal fade" id="globalModalForm" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content" id="globalModalContent"></div>
		</div>
	</div>
}

// templ ApptForm(uvs ApptValidations, edit bool) {
// 	<form hx-post={ m.If(edit, "/admin/appts/hx/updateAppt", "/admin/appts/hx/createAppt") }>
// 		<div class="modal-body">
// 			<div class="form-group">
// 				<label for={ uvs.Name.Key + "_id" }>Name </label>
// 				<input
// 					type="text"
// 					class={ "form-control" , m.If(uvs.Name.Result.Valid, "", "is-invalid") }
// 					name={ uvs.Name.Key }
// 					value={ uvs.Name.Value }
// 					id={ uvs.Name.Key + "_id" }
// 				/>
// 				<div class="invalid-feedback">
// 					{ uvs.Name.Result.ErrorMsg }
// 				</div>
// 			</div>
// 			<div class="form-group">
// 				<label for={ uvs.Email.Key + "_id" }>Email </label>
// 				<input
// 					type="text"
// 					class={ "form-control" , m.If(uvs.Email.Result.Valid, "", "is-invalid") }
// 					name={ uvs.Email.Key }
// 					value={ uvs.Email.Value }
// 					id={ uvs.Email.Key + "_id" }
// 				/>
// 				<div class="invalid-feedback">
// 					{ uvs.Email.Result.ErrorMsg }
// 				</div>
// 			</div>
// 			<div class="form-group">
// 				<label for={ uvs.Password.Key + "_id" }>Password </label>
// 				<input
// 					type="text"
// 					class={ "form-control" , m.If(uvs.Password.Result.Valid, "", "is-invalid") }
// 					name={ uvs.Password.Key }
// 					value={ uvs.Password.Value }
// 					id={ uvs.Password.Key + "_id" }
// 				/>
// 				<div class="invalid-feedback">
// 					{ uvs.Password.Result.ErrorMsg }
// 				</div>
// 			</div>
// 			<div class="form-group">
// 				<label for={ uvs.PasswordConfirmation.Key + "_id" }>Password Confirmation</label>
// 				<input
// 					type="text"
// 					class={ "form-control" , m.If(uvs.PasswordConfirmation.Result.Valid, "", "is-invalid") }
// 					name={ uvs.PasswordConfirmation.Key }
// 					value={ uvs.PasswordConfirmation.Value }
// 					id={ uvs.PasswordConfirmation.Key + "_id" }
// 				/>
// 				<div class="invalid-feedback">
// 					{ uvs.PasswordConfirmation.Result.ErrorMsg }
// 				</div>
// 			</div>
// 		</div>
// 		<div class="modal-footer">
// 			<button type="button" class="btn btn-secondary" data-dismiss="modal"><i class="fa fa-times mr-2"></i>Cancel</button>
// 			if edit {
// 				<button type="submit" class="btn btn-primary"><i class="fa fa-save mr-2"></i>Save Changes</button>
// 			} else {
// 				<button type="submit" class="btn btn-primary"><i class="fa fa-save mr-2"></i>Save</button>
// 			}
// 		</div>
// 	</form>
// 	<script>
// 		htmx.on('close-global-modal-form', event => {
// 		  	htmx.ajax(
// 			'GET',
// 			'/admin/appts/hx/list?page=1', {
// 			  target: '#apptTableMain',
// 			  swap:'outerHTML'
// 			});
// 		})
// 	</script>
// }

templ ApptTable(paginator store.Pagination[models.Appointment]) {
	<table id="appt-table" class="table table-hover">
		<thead>
			<tr>
				<th scope="col">#</th>
				<th scope="col">Client Name</th>
				<th scope="col">Date</th>
				<th scope="col">Time</th>
				<th scope="col">Status</th>
				<th scope="col">Option</th>
			</tr>
		</thead>
		<tbody>
			for i,appt := range paginator.Items() {
				<tr>
					<th scope="row">{ fmt.Sprintf("%d", i+1) }</th>
					<td>client name</td>
					<td>{ appt.ApptTime.Time.Format("2006/01/02") }</td>
					<td>{ appt.ApptTime.Time.Format("03:04:05") }</td>
					<td>{ appt.Status.String }</td>
					<td>
						<a href="#" >
							<i class="fa fa-edit mr-2"></i>
						</a>
						<a href="#" >
							<i class="fa fa-trash text-danger mr-2"></i>
						</a>
					</td>
				</tr>
			}
		</tbody>
	</table>
}
