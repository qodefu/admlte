package appts

import "goth/internal/store/models"
import "fmt"
import "goth/internal/config"
import "goth/internal/components"

type serverData struct {
    DateRef string  
    TimeRef string 
    SubmitBtnRef string 
	NoteRef string
}
templ ApptForm(clients []models.Client, validation ApptFormValidation) {
	<div class="card card-default">

		<form hx-post={config.Routes().Admin.Appt.SaveNew} hx-swap="outerHTML"  autocomplete="off">
		<div class="content-header">
			<div class="container-fluid">
				<div class="row mb-2">
					<div class="col-sm-6">
						<h1 class="m-0 text-dark"></h1>
					</div><!-- /.col -->
					<div class="col-sm-6">
						<ol class="breadcrumb float-sm-right">
							<li class="breadcrumb-item"><a href="#">Dashboard</a></li>
							<li class="breadcrumb-item active"><a href="#">Appointments</a></li>
							<li class="breadcrumb-item active">Create</li>
						</ol>
					</div><!-- /.col -->
				</div><!-- /.row -->
			</div><!-- /.container-fluid -->
		</div>

		<div class="card-header">
			<h3 class="card-title">Add New Appointment</h3>
		</div>
		<div class="card-body">
			<div class="row">
				<div class="col-md-6">
					<div class="form-group">
						<label for={ idGen.Id("client_name") }>Client:</label>
						<select name="clientId" id={ idGen.Id("client_name") } class="custom-select my-1 mr-sm-2">
							<option value="" selected>Choose...</option>
							for _, e := range clients {

								<option value={fmt.Sprintf("%d", e.ID)}>{e.Name}</option>
							}
						</select>
						<div class="invalid-feedback"></div>
					</div>
				</div>
			</div>
			<div class="row">
				<div class="col-md-6">
					<div class="form-group">
						<label for={ idGen.Id("appt_date") }>Date:</label>
							<div class="input-group-append">
								@components.DatePicker("appt_date", idGen.Id("appt_date"))
								<div class="input-group-text">
									<i class="fa fa-calendar"></i>
								</div>
							</div>
						<div class="invalid-feedback"></div>
					</div>
				</div>
				<div class="col-md-6">
					<div class="form-group">
						<label for={ idGen.Id("appt_time") }>Appointment Time:</label>
							<div class="input-group-append" >
								@components.TimePicker("appt_time", idGen.Id("appt_time"))
								<div class="input-group-text">
									<i class="far fa-clock"></i>
								</div>
							</div>
						<div class="invalid-feedback"></div>
					</div>
				</div>
			</div>
			<div class="row">
				<div class="col-md-12">
					<div class="form-group">
						<label for={ idGen.Id("appt_note") }>Note:</label>
						<textarea
							type="text"
							class="form-control"
							name="appt_note"
							value=""
							id={ idGen.Id("appt_note") }
						></textarea>
						<div class="invalid-feedback"></div>
					</div>
				</div>
			</div>
			<div class="row">
				<div class="col-md-6">
					<div class="form-group">
						<label for={ idGen.Id("status") }>Status:</label>
						<select name="status" id={ idGen.Id("status") } class="custom-select my-1 mr-sm-2">
							<option value="" selected>Choose...</option>
								<option value="SCHEDULED">Scheduled</option>
								<option value="CLOSED">Closed</option>
						</select>
						<div class="invalid-feedback"></div>
					</div>
				</div>
			</div>
		</div>
		<div class="card-footer">
					<button type="button" class="btn btn-secondary mr-1" data-dismiss="modal"><i class="fa fa-times mr-2"></i>Cancel</button>
					<button type="submit" id={idGen.Id("submit")} class="btn btn-primary"><i class="fa fa-save mr-2"></i>Save</button>
		</div>
		</form>
	</div>
	@templ.JSONScript("appt-server-data", serverData{
        DateRef: idGen.IdRef("appt_date"), 
        TimeRef: idGen.IdRef("appt_time"),
        SubmitBtnRef: idGen.IdRef("submit"),
        NoteRef: idGen.IdRef("appt_note")})

	@components.Push("js") {
	<script>
	(function() {
        var serverData = JSON.parse($("#appt-server-data").text())
        console.log(serverData)
		let editor;

		ClassicEditor
		.create(document.querySelector(serverData.NoteRef))
		.then( e => {
			editor = e	
			console.log(editor);
		})
		.catch(error => {
			console.error(error);
		});

        $(serverData.SubmitBtnRef).on('click',function(){
			const editorData = editor.getData();
			console.log(editorData);
			$(serverData.NoteRef).val(editorData)

        });
    })()
    </script>
	}
}
