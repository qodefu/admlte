// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: generated.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAppt = `-- name: CreateAppt :one
INSERT INTO appointments(
  clientId, ApptTime, Status, Note, created
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, clientid, appttime, status, note, created
`

type CreateApptParams struct {
	Clientid pgtype.Int4
	Appttime pgtype.Timestamp
	Status   pgtype.Text
	Note     pgtype.Text
	Created  pgtype.Timestamp
}

func (q *Queries) CreateAppt(ctx context.Context, arg CreateApptParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, createAppt,
		arg.Clientid,
		arg.Appttime,
		arg.Status,
		arg.Note,
		arg.Created,
	)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.Clientid,
		&i.Appttime,
		&i.Status,
		&i.Note,
		&i.Created,
	)
	return i, err
}

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO  users(
  name, email, password, created
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, email, password, created
`

type CreateAuthorParams struct {
	Name     string
	Email    pgtype.Text
	Password pgtype.Text
	Created  pgtype.Timestamp
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (User, error) {
	row := q.db.QueryRow(ctx, createAuthor,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Created,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Created,
	)
	return i, err
}

const createClient = `-- name: CreateClient :one
INSERT INTO  clients(
  name, created
) VALUES (
  $1, $2
)
RETURNING id, name, created
`

type CreateClientParams struct {
	Name    string
	Created pgtype.Timestamp
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRow(ctx, createClient, arg.Name, arg.Created)
	var i Client
	err := row.Scan(&i.ID, &i.Name, &i.Created)
	return i, err
}

const deleteAppt = `-- name: DeleteAppt :exec
DELETE FROM appointments 
WHERE id = $1
`

func (q *Queries) DeleteAppt(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAppt, id)
	return err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients 
WHERE id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteClient, id)
	return err
}

const getAppointment = `-- name: GetAppointment :one
SELECT id, clientid, appttime, status, note, created FROM appointments 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAppointment(ctx context.Context, id int32) (Appointment, error) {
	row := q.db.QueryRow(ctx, getAppointment, id)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.Clientid,
		&i.Appttime,
		&i.Status,
		&i.Note,
		&i.Created,
	)
	return i, err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, email, password, created FROM users 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getAuthor, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Created,
	)
	return i, err
}

const getClient = `-- name: GetClient :one
SELECT id, name, created FROM clients 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClient(ctx context.Context, id int32) (Client, error) {
	row := q.db.QueryRow(ctx, getClient, id)
	var i Client
	err := row.Scan(&i.ID, &i.Name, &i.Created)
	return i, err
}

const getUserClient = `-- name: GetUserClient :one
SELECT u.id, c.name FROM clients c 
JOIN users u
on c.id = u.id 
WHERE u.id = $1 LIMIT 1
`

type GetUserClientRow struct {
	ID   int64
	Name string
}

func (q *Queries) GetUserClient(ctx context.Context, id int64) (GetUserClientRow, error) {
	row := q.db.QueryRow(ctx, getUserClient, id)
	var i GetUserClientRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listAppt = `-- name: ListAppt :many
SELECT id, clientid, appttime, status, note, created FROM  appointments 
ORDER BY $1
`

func (q *Queries) ListAppt(ctx context.Context, dollar_1 interface{}) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, listAppt, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.Clientid,
			&i.Appttime,
			&i.Status,
			&i.Note,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, email, password, created FROM  users 
ORDER BY $1
`

func (q *Queries) ListAuthors(ctx context.Context, dollar_1 interface{}) ([]User, error) {
	rows, err := q.db.Query(ctx, listAuthors, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClients = `-- name: ListClients :many
SELECT id, name, created FROM  clients 
ORDER BY $1
`

func (q *Queries) ListClients(ctx context.Context, dollar_1 interface{}) ([]Client, error) {
	rows, err := q.db.Query(ctx, listClients, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(&i.ID, &i.Name, &i.Created); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppt = `-- name: UpdateAppt :exec
UPDATE appointments 
  set clientId= $2,
  apptTime = $3,
  status = $4,
  note = $5
WHERE id = $1
`

type UpdateApptParams struct {
	ID       int32
	Clientid pgtype.Int4
	Appttime pgtype.Timestamp
	Status   pgtype.Text
	Note     pgtype.Text
}

func (q *Queries) UpdateAppt(ctx context.Context, arg UpdateApptParams) error {
	_, err := q.db.Exec(ctx, updateAppt,
		arg.ID,
		arg.Clientid,
		arg.Appttime,
		arg.Status,
		arg.Note,
	)
	return err
}

const updateAuthor = `-- name: UpdateAuthor :exec
UPDATE users
  set name = $2,
  email = $3,
  password = $4
WHERE id = $1
`

type UpdateAuthorParams struct {
	ID       int64
	Name     string
	Email    pgtype.Text
	Password pgtype.Text
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.db.Exec(ctx, updateAuthor,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	return err
}

const updateClient = `-- name: UpdateClient :exec
UPDATE clients 
  set name = $2
WHERE id = $1
`

type UpdateClientParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) error {
	_, err := q.db.Exec(ctx, updateClient, arg.ID, arg.Name)
	return err
}
